[ADT 3]
! Checksum: vXO2skD37egAcrKzRVhe1A
! Version: 201506122120
! Title: HTML5视频脚本
! Homepage: http://www.adtchrome.com/extension/adt-html5video.html
! Match: v\.youku\.com\/v_show
! Begin: --

(function() {
    function html5Video(){}
    html5Video.prototype = {
        _canPlayM3U8 : null,
        get canPlayM3U8() {
            if(!this._canPlayM3U8){
                this._canPlayM3U8 = !! document.createElement("video").canPlayType("application/x-mpegURL") ? true : false;
            }
            return this._canPlayM3U8;

        },
        each:function (arrOrObject, fn, context, i, len) {
            if (typeof arrOrObject.length == "number") {
                for (i = 0, len = arrOrObject.length; i < len; i++) 
                    if (fn.call(context, arrOrObject[i], i) == false) 
                        break
                } else 
                for (i in arrOrObject) 
                    if (fn.call(context, arrOrObject[i], i) == false) 
                        break
                },
                rNode:function (el) {
                    try {
                        el.parentNode.removeChild(el)
                    } catch (e) {}
                },
                cTag:function (tagName, styles, attrs, out, t, cssText) {
                    t = document.createElement(tagName),
                    cssText = "";
                    this.each(styles || {}, function (value, key) {
                        cssText += [key, ":", value, ";"].join("")
                    }),
                    t.style.cssText = cssText;
                    this.each(attrs || {}, function (value, key) {
                        t.setAttribute(key, value)
                    });
                    return out && out.appendChild(t) || t
                },
                service:function (name, query) {
                    return "http://2.zythum.sinaapp.com/youkuhtml5playerbookmark/service/" + (name || "") + ".php?" + query
                },
                hasClass: function (el, cn) {
                    return el.className.match(new RegExp("(\\s|^)" + cn + "(\\s|$)"))
                },
                addClass: function (el, cn) {
                    if (!this.hasClass(el, cn)) el.className += " " + cn
                },
            removeClass: function (el, cn) {
                if (this.hasClass(el, cn)) {
                    el.className = el.className.replace(new RegExp("(\\s|^)" + cn + "(\\s|$)"), " ").trim()
                }
            },
            findPa:function(dc,pname) {
                return dc.querySelector("[paction="+pname+"]");
            },
            fTime: function(time) {
                time = parseInt(time);
                var hours   = Math.floor(time / 3600);
                var minutes = Math.floor((time - (hours * 3600)) / 60);
                var seconds = time - (hours * 3600) - (minutes * 60);
                if (hours   < 10) {hours   = "0"+hours;}
                if (minutes < 10) {minutes = "0"+minutes;}
                if (seconds < 10) {seconds = "0"+seconds;}
                return hours+':'+minutes+':'+seconds;
            },
            jsonp: function (url, callback, handler, scr, back) {
                var t = this;
                // back = handler || "ADTHTML5Player" + +(new Date) + Math.random().toString().replace(".", "");
                // console.log("back=" + back);

                window[back = handler || "ADTHTML5Player" + +(new Date) + Math.random().toString().replace(".", "")] = function () {
                    //console.log(back);
                    callback && callback.apply(t, arguments);
                    delete window[back];
                    t.rNode(scr)
                };
                (scr = t.cTag("script", {}, {}, document.body)).src = url + back
            },
            sites:[
            {
                reg:/http:\/\/v\.youku\.com/,
                getFlashPlayer:function(){
                    return {};
                },
                getFn:function(){
                    var _id = window.videoId;
                    var mp4 = function (callback) {
                        var _id = window.videoId;
                        var mk_a3 = "b4et";
                        var mk_a4 = "boa4";
                        var userCache_a1 = "4";
                        var userCache_a2 = "1";
                        var rs;
                        var sid;
                        var token;

                        function na(a) {
                            if (!a) return "";
                            var a = a.toString(),
                            c, b, f, i, e, h = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1];
                            i = a.length;
                            f = 0;
                            for (e = ""; f < i;) {
                                do c = h[a.charCodeAt(f++) & 255]; while (f < i && -1 == c);
                                if (-1 == c) break;
                                do b = h[a.charCodeAt(f++) & 255]; while (f < i && -1 == b);
                                if (-1 == b) break;
                                e += String.fromCharCode(c << 2 | (b & 48) >> 4);
                                do {
                                    c = a.charCodeAt(f++) & 255;
                                    if (61 == c) return e;
                                    c = h[c]
                                } while (f < i && -1 == c);
                                if (-1 == c) break;
                                e += String.fromCharCode((b & 15) << 4 | (c & 60) >> 2);
                                do {
                                    b = a.charCodeAt(f++) & 255;
                                    if (61 == b) return e;
                                    b = h[b]
                                } while (f < i && -1 == b);
                                if (-1 == b) break;
                                e += String.fromCharCode((c & 3) << 6 | b)
                            }
                            return e
                        }

                        function D(a) {
                            if (!a) return "";
                            var a = a.toString(),
                            c, b, f, e, g, h;
                            f = a.length;
                            b = 0;
                            for (c = ""; b < f;) {
                                e = a.charCodeAt(b++) & 255;
                                if (b == f) {
                                    c += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e >> 2);
                                    c += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt((e & 3) << 4);
                                    c += "==";
                                    break
                                }
                                g = a.charCodeAt(b++);
                                if (b == f) {
                                    c += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e >> 2);
                                    c += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt((e & 3) << 4 | (g & 240) >> 4);
                                    c += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt((g & 15) << 2);
                                    c += "=";
                                    break
                                }
                                h = a.charCodeAt(b++);
                                c += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e >> 2);
                                c += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt((e & 3) << 4 | (g & 240) >> 4);
                                c += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt((g & 15) << 2 | (h & 192) >> 6);
                                c += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(h & 63)
                            }
                            return c
                        }

                        function E(a, c) {
                            for (var b = [], f = 0, i, e = "", h = 0; 256 > h; h++) b[h] = h;
                                for (h = 0; 256 > h; h++) f = (f + b[h] + a.charCodeAt(h % a.length)) % 256, i = b[h], b[h] = b[f], b[f] = i;
                                    for (var q = f = h = 0; q < c.length; q++) h = (h + 1) % 256, f = (f + b[h]) % 256, i = b[h], b[h] = b[f], b[f] = i, e += String.fromCharCode(c.charCodeAt(q) ^ b[(b[h] + b[f]) % 256]);
                                        return e
                                }

                                function F(a, c) {
                                    for (var b = [], f = 0; f < a.length; f++) {
                                        for (var i = 0, i = "a" <= a[f] && "z" >= a[f] ? a[f].charCodeAt(0) - 97 : a[f] - 0 + 26, e = 0; 36 > e; e++)
                                            if (c[e] == i) {
                                                i = e;
                                                break
                                            }
                                            b[f] = 25 < i ? i - 26 : String.fromCharCode(i + 97)
                                        }
                                        return b.join("")
                                    }

                                    function T(a, c) {
                                        this._sid = sid;
                                        this._seed = a.seed;
                                        this._fileType = c;
                                        var b = new U(this._seed);
                                        this._streamFileIds = a.streamfileids;
                                        this._videoSegsDic = {};
                                        for (c in a.segs) {
                                            for (var f = [], i = 0, g = 0; g < a.segs[c].length; g++) {
                                                var h = a.segs[c][g],
                                                q = {};
                                                q.no = h.no;
                                                q.size = h.size;
                                                q.seconds = h.seconds;
                                                h.k && (q.key = h.k);
                                                q.fileId = this.getFileId(a.streamfileids, c, parseInt(g), b);
                                                q.type = c;
                                                q.src = this.getVideoSrc(h.no, a, c, q.fileId);
                                                //console.log("979 address is " + q.src);
                                                f[i++] = q
                                            }
                                            this._videoSegsDic[c] = f
                                        }
                                    }

                                    function U(a) {
                                        this._randomSeed = a;
                                        this.cg_hun()
                                    }
                                    U.prototype = {
                                        cg_hun: function() {
                                            this._cgStr = "";
                                            for (var a = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/\\:._-1234567890", c = a.length, b = 0; b < c; b++) {
                                                var f = parseInt(this.ran() * a.length);
                                                this._cgStr += a.charAt(f);
                                                a = a.split(a.charAt(f)).join("")
                                            }
                                        },
                                        cg_fun: function(a) {
                                            for (var a = a.split("*"), c = "", b = 0; b < a.length - 1; b++) c += this._cgStr.charAt(a[b]);
                                                return c
                                        },
                                        ran: function() {
                                            this._randomSeed = (211 * this._randomSeed + 30031) % 65536;
                                            return this._randomSeed / 65536
                                        }
                                    };
                                    T.prototype = {
                                        getFileId: function(a, c, b, f) {
                                            for (var i in a)
                                                if (i == c) {
                                                    streamFid = a[i];
                                                    break
                                                }
                                                if ("" == streamFid) return "";
                                                c = f.cg_fun(streamFid);
                                                a = c.slice(0, 8);
                                                b = b.toString(16);
                                                1 == b.length && (b = "0" + b);
                                                b = b.toUpperCase();
                                                c = c.slice(10, c.length);
                                                return a + b + c
                                            },
                                            getVideoSrc: function(a, c, d, f, i, g) {
                                                if (!c.videoid || !d) return "";
                                                var h = {
                                                    flv: 0,
                                                    flvhd: 0,
                                                    mp4: 1,
                                                    hd2: 2,
                                                    "3gphd": 1,
                                                    "3gp": 0
                                                }[d],
                                                q = {
                                                    flv: "flv",
                                                    mp4: "mp4",
                                                    hd2: "flv",
                                                    "3gphd": "mp4",
                                                    "3gp": "flv"
                                                }[d],
                                                k = a.toString(16);
                                                1 == k.length && (k = "0" + k);
                                                var l = c.segs[d][a].seconds,
                                                a = c.segs[d][a].k;
                                                if ("" == a || -1 == a) a = c.key2 + c.key1;
                                                d = "";
                                                c.show && (d = c.show.show_paid ? "&ypremium=1" : "&ymovie=1");
                                                c = "/player/getFlvPath/sid/" + sid + "_" + k + "/st/" + q + "/fileid/" + f + "?K=" + a + "&hd=" + h + "&myp=0&ts=" + l + "&ypp=0" + d;
                                                f = encodeURIComponent(D(E(F(mk_a4 + "poz" + userCache_a2, [19, 1, 4, 7, 30, 14, 28, 8, 24, 17, 6, 35, 34, 16, 9, 10, 13, 22, 32, 29, 31, 21, 18, 3, 2, 23, 25, 27, 11, 20, 5, 15, 12, 0, 33, 26]).toString(), sid + "_" + f + "_" + token)));
                                                c = c + ("&ep=" + f) + "&ctype=12&ev=1" + ("&token=" + token);
                                                c += "&oip=" + rs.data[0].ip;
                                                return "http://k.youku.com" + (c + ((i ? "/password/" + i : "") + (g ? g : "")))
                                            }
                                        };

                                        this.jsonp("http://v.youku.com/player/getPlaylist/VideoIDS/" + _id + "/Pf/4/ctype/12/ev/1?__callback=", function (param) {
                                            rs = param;
                                            var a = param.data[0],
                                            c = E(F(mk_a3 + "o0b" + userCache_a1, [19, 1, 4, 7, 30, 14, 28, 8, 24, 17, 6, 35, 34, 16, 9, 10, 13, 22, 32, 29, 31, 21, 18, 3, 2, 23, 25, 27, 11, 20, 5, 15, 12, 0, 33, 26]).toString(), na(a.ep));
                                            c = c.split("_");
                                            sid = c[0];
                                            token = c[1];
                                            if (this.canPlayM3U8) {
                                                var ep = encodeURIComponent(D(E(F(mk_a4 + "poz" + userCache_a2, [19, 1, 4, 7, 30, 14, 28, 8, 24, 17, 6, 35, 34, 16, 9, 10, 13, 22, 32, 29, 31, 21, 18, 3, 2, 23, 25, 27, 11, 20, 5, 15, 12, 0, 33, 26]).toString(), sid + "_" + _id + "_" + token)));
                                                var oip = a.ip;
                                                callback({
                                                    "&#x6807;&#x6E05;": "http://pl.youku.com/playlist/m3u8?vid=" + _id + "&type=flv&ctype=12&keyframe=1&ep=" + ep + "&sid=" + sid + "&token=" + token + "&ev=1&oip=" + oip,
                                                    "&#x9AD8;&#x6E05;": "http://pl.youku.com/playlist/m3u8?vid=" + _id + "&type=mp4&ctype=12&keyframe=1&ep=" + ep + "&sid=" + sid + "&token=" + token + "&ev=1&oip=" + oip,
                                                    "&#x8D85;&#x6E05;": "http://pl.youku.com/playlist/m3u8?vid=" + _id + "&type=hd2&ctype=12&keyframe=1&ep=" + ep + "&sid=" + sid + "&token=" + token + "&ev=1&oip=" + oip
                                                })
                                            } else {
                                                var t = new T(a);
                                                callback({
                                                    "&#x6807;&#x6E05;": t._videoSegsDic["3gphd"][0].src
                                                })
                                            }
                                        })
                    };
                    return mp4;
                }
            },
            {
                reg:/letv\.com/,
                getFlashPlayer:function(){
                    return {flashId:"fla_box"};
                },
                getFn:function(){
                    var getSource = function (callback) {
                        var urls = {};
                        var mmsid = window.__INFO__.video.mmsid;
                        var vid = window.__INFO__.video.vid;
                        this.jsonp("http://api.letv.com/time?callback=", function (rs) {
                            var a = vjs.auth.getKey(rs.stime | 0);
                            var tkey = LELib.VideoJS.auth.prototype.getKey(rs.stime | 0);
                            this.jsonp("http://api.letv.com/geturl?platid=3&splatid=304&playid=0&vtype=9,13,21&version=2.0&tss=ios&mmsid=" + mmsid + "&vid=" + vid + "&tkey=" + tkey + "&retry=1&callback=", function (rs) {
                                this.each(rs.data[0]["infos"], function (item) {
                                    var type = item.vtype;
                                    switch (item.vtype) {
                                        case "9":
                                        type = "\u8d85\u6e05";
                                        break;
                                        case "13":
                                        type = "\u9ad8\u6e05";
                                        break;
                                        case "21":
                                        type = "\u6807\u6e05";
                                        break;
                                    }
                                    urls[type] = this.canPlayM3U8 ? item.backUrl1 : item.backUrl1.replace("&tss=ios", "")
                                });
                                urls && callback(urls)
                            })
                        })
                    };
                    return getSource;
                }
            },
            {
                reg:/iqiyi\.com/,
                getFlashPlayer:function(){
                    return {};
                },
                getFn:function(){
                    var canPlayM3U8 = this.canPlayM3U8;
                    var getSource = function (callback) {
                        var timer;
                        if (window.info) {
                            var scr = document.createElement("script");
                            scr.src = "http://cache.video.qiyi.com/m/201971/" + window.info.videoId + "/";
                            document.body.appendChild(scr);
                            timer = setInterval(function () {
                                if (window.ipadUrl) {
                                    clearInterval(timer);
                                    if (canPlayM3U8) {
                                        callback({
                                            "高清": ipadUrl.data.url
                                        })
                                    } else {
                                        var mp4Url = ipadUrl.data.mp4Url;
                                        var scr = document.createElement("script");
                                        scr.src = mp4Url;
                                        document.body.appendChild(scr);
                                        clearInterval(timer);
                                        timer = setInterval(function () {
                                            if (window.videoUrl) {
                                                clearInterval(timer);
                                                callback({
                                                    "高清": videoUrl.data.l
                                                })
                                            }
                                        }, 100)
                                    }
                                }
                            }, 100)
                        } else {
                            var box = document.getElementById("flashbox");
                            var tvid = box.getAttribute("data-player-tvid");
                            this.jsonp(this.service("iqiyi", "tvid=" + tvid + "&callback="), function (data) {
                                if (canPlayM3U8) {
                                    callback({
                                        "高清": data.data.mpl[0].m3u
                                    })
                                } else {
                                    var mp4Url = data.data.mpl[0].m4u;
                                    var scr = document.createElement("script");
                                    scr.src = mp4Url;
                                    document.body.appendChild(scr);
                                    clearInterval(timer);
                                    timer = setInterval(function () {
                                        if (window.videoUrl) {
                                            clearInterval(timer);
                                            callback({
                                                "高清": videoUrl.data.l
                                            })
                                        }
                                    }, 100)
                                }
                            })
                        }
                    };
                    return getSource;
                }
            }
            ],
        //第二部分 初始化html5播放器
        hideFlash:function(flashparam){
            var flashText = '<i title="Flash播放" style="text-shadow:0 0 2px #eee;letter-spacing:-1px;background:#eee;font-weight:bold;padding:0;font-family:arial,sans-serif;font-size:30px;color:#666;width:152px;height:52px;border:4px solid #ccc;border-radius:12px;position:absolute;top:50%;left:50%;margin: -30px 0 0 -80px;text-align:center;line-height:52px;cursor:pointer;" id="ADT-PlayFlash-btn">Flash</i>';
                            //'<i title="HTML5播放" style="text-shadow:0 0 2px #eee;letter-spacing:-1px;background:#eee;font-weight:bold;padding:0;font-family:arial,sans-serif;font-size:30px;color:#666;width:152px;height:52px;border:4px solid #ccc;border-radius:12px;position:absolute;top:50%;left:50%;margin:-30px 0 0 10px;text-align:center;line-height:52px;cursor:pointer;" id="ADT-PlayHTML5-btn">HTML5</i>';
                            var count = 0;
                            var flashBlocks = {};
                            var click2ShowFlash = function (e) {
                                var flashDiv = this.parentNode;
                                var index = flashDiv.getAttribute("data-flash-index");
                                if (index != null) {
                                    var flash = flashBlocks[index];
                                    flash.setAttribute("data-flash-show", "isshow");
                                    flashDiv.parentNode.insertBefore(flash, flashDiv);
                                };
                                flashDiv.parentNode.removeChild(flashDiv);
                                this.removeEventListener("click", click2ShowFlash, false)
                            };
                            var createAPlaceHolder = function (flash, width, height) {
                                var index = count++;
                                var style = document.defaultView.getComputedStyle(flash, null);
                                var positionType = style.position;
                                positionType = positionType === "static" ? "relative" : positionType;
                                var margin = style["margin"];
                                var display = style["display"] == "inline" ? "inline-block" : style["display"];
                                var style = ["", "width:" + width + "px", "height:" + height + "px", "position:" + positionType, "margin:" + margin, "display:" + display, "margin:0", "padding:0", "border:0", "border-radius:1px", "cursor:default", "background:-webkit-linear-gradient(top, rgba(240,240,240,1)0%,rgba(220,220,220,1)100%)", ""];
                                flashBlocks[index] = flash;
                                var placeHolder = document.createElement("div");
                                placeHolder.setAttribute("title", "选择播放模式");
                                placeHolder.setAttribute("data-flash-index", "" + index);
                                flash.parentNode.insertBefore(placeHolder, flash);
                                flash.parentNode.removeChild(flash);
                                placeHolder.style.cssText += style.join(";");
                                placeHolder.innerHTML = flashText;
                                placeHolder.querySelector("#ADT-PlayFlash-btn").addEventListener("click", click2ShowFlash, false);
                                return placeHolder
                            };
                            var parseFlash = function (target) {
                                if (target instanceof HTMLObjectElement) {
                                    if (target.innerHTML.trim() == "") return;
                                    if (target.getAttribute("classid") && !/^java:/.test(target.getAttribute("classid"))) return
                                } else if (!(target instanceof HTMLEmbedElement)) return;
                            var width = target.offsetWidth;
                            var height = target.offsetHeight;
                            if (width > 160 && height > 60) {
                                createAPlaceHolder(target, width, height)
                            }
                        };
            /*var handleBeforeLoadEvent = function (e) {
                var target = e.target;
                if (target.getAttribute("data-flash-show") == "isshow") return;
                parseFlash(target)
            };*/
            if('flashId' in flashparam){
                var o = document.getElementById(flashparam['flashId']);
                //var index = count++;
                var width = o.offsetWidth;
                var height = o.offsetHeight;
                var style = document.defaultView.getComputedStyle(o, null);
                var positionType = style.position;
                positionType = positionType === "static" ? "relative" : positionType;
                var margin = style["margin"];
                var display = style["display"] == "inline" ? "inline-block" : style["display"];
                var style = ["", "width:" + width + "px", "height:" + height + "px", "position:" + positionType, "margin:" + margin, "display:" + display, "margin:0", "padding:0", "border:0", "border-radius:1px", "cursor:default", "background:-webkit-linear-gradient(top, rgba(240,240,240,1)0%,rgba(220,220,220,1)100%)", ""];
                //flashBlocks[index] = flash;
                var placeHolder = document.createElement("div");
                placeHolder.setAttribute("title", "选择播放模式");
                o.parentNode.insertBefore(placeHolder, o);
                //flash.parentNode.removeChild(flash);
                placeHolder.style.cssText += style.join(";");
                placeHolder.innerHTML = flashText;
                placeHolder.querySelector("#ADT-PlayFlash-btn").addEventListener("click", click2ShowFlash, false);
                return;
            }
            var embeds = document.getElementsByTagName("embed");
            var objects = document.getElementsByTagName("object");
            for (var i = 0, len = objects.length; i < len; i++) objects[i] && parseFlash(objects[i]);
                for (var i = 0, len = embeds.length; i < len; i++) embeds[i] && parseFlash(embeds[i]);

            },
        initPlayer:function(urls){
            //禁止背景滚动
            document.body.style.height = "100%";
            document.body.style.overflow = "hidden";
            //创建播放器以及绑定播放器相关事件
            //插入iframe
            var styles = {
                position: "fixed",
                width: "100%",
                height: "100%",
                display: "block",
                top: "0",
                left: "0",
                bottom: "0",
                right: "0",
                "z-index": "9999999",
                border: "none",
                background: "transparent"
            };
            var attrs = {
                src: "about:blank",
                frameborder: "0",
                scrolling: "no",
                allowtransparency: "yes",
                allowfullscreen: "true",
            };
            var iframe = this.cTag("iframe", styles, attrs, document.body);

            var videoLink = null;
            var videoContent = "";
            var videoType = localStorage["ADT_Video_Type"];
            var vts = Object.keys(urls);
            if (videoType!= undefined && vts.indexOf(videoType)>-1) {
            }else{
                videoType = vts[0];
            }
            
            for (var i = vts.length - 1; i >= 0; i--) {
                if(vts[i] == videoType){
                    videoLink = urls[videoType];
                    videoContent += '<li class="show"><span vsrc="'+urls[videoType]+'">'+videoType+'</span></li>';
                }else{
                    videoContent += '<li><span vsrc="'+urls[vts[i]]+'">'+vts[i]+'</span></li>';
                }
                
            };
            
            var bodyContent = 
            '<body paction="null"> \
            <div class="cover"></div> \
            <div class="wrap"> \
            <div class="player" id="player"> \
            <video class="video" paction="pstate" id="video" autoplay="true" src="'+videoLink+'"> \
            </video> \
            <div class="msg"><span class="content">播放</span></div> \
            <div class="loading"><i class="icon icon-spinner"></i></div> \
            <div class="sidebar"> \
            <ul> \
            <li><i class="icon icon-close" paction="close"></i></li> \
            <li><i class="icon zoom-control icon-expand2" paction="max"></i></li> \
            <li><i class="icon light-control icon-brightness" paction="dark"></i></li> \
            <li><i class="icon shortcut-control icon-table" paction="shortcuts"></i></li> \
            </ul> \
            </div> \
            <div class="ctrl"> \
            <div class="progress-video" paction="video-progress"> \
            <div class="progress-timeline"></div> \
            </div> \
            <div class="toolbar"> \
            <div class="toolbar-left"> \
            <div id="pcontrol"><i class="icon play-control icon-play" paction="pstate"></i><i class="icon icon-spinner"></i></div> \
            <div class="time"> \
            <span class="current" paction="ctime">00:00:00</span> \
            <span class="total" paction="stime">00:00:00</span> \
            </div> \
            </div> \
            <div class="toolbar-right"> \
            <i class="icon icon-volume icon-volume-medium"></i> \
            <div class="progress-volume" paction="volume-progress"> \
            <div class="volume-timeline"></div> \
            </div> \
            <ul class="qingxi-control">'+videoContent+'</ul> \
            <i class="icon setting-control icon-cog"></i> \
            <i class="icon full-control icon-expand" paction="full"></i> \
            </div> \
            </div> \
            </div> \
            <div class="shortcuts" style="display:none" paction="shortcuts"> \
            <ul> \
            <li><i class="icon ifont">&rarr;</i><span>前进20秒</span></li> \
            <li><i class="icon iifont">&larr;</i><span>后退30秒</span></li> \
            <li><i class="icon ifont">&uarr;</i><span>音量提高</span></li> \
            <li><i class="icon ifont">&darr;</i><span>音量降低</span></li> \
            <li><i class="icon ifont">space</i><span>暂停/播放</span></li> \
            <li><i class="icon ifont">F</i><span>全屏</span></li> \
            <li><i class="icon ifont">Esc</i><span>退出全屏</span></li> \
            <li><i class="icon ifont">M</i><span>最大化</span></li> \
            </ul> \
            </div> \
            </div> \
            </div> \
            </body>';
            var icontent = '<head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link href="http://sub.adtchrome.com/shit.css" type="text/css" rel="stylesheet"></head>'+bodyContent;
            iframe.contentWindow.document.open();
            iframe.contentWindow.document.write(icontent);
            iframe.contentWindow.document.close();
            iframe.contentWindow.focus();
            //绑定事件
            this.bindPlayerEvent(iframe);
        },
        bindPlayerEvent:function(iframe){
            var t = this;//fuck all this js shit
            var d = iframe.contentWindow.document;
            var video = d.getElementById("video");
            var player = d.getElementById("player");
            var showTimer;
            var inzoom = false;
            var playerEvent = {
                pstate: function (el) {
                    video[video.paused ? "play" : "pause"]();
                },
                light: function (el) {
                    t.removeClass(d.querySelector(".cover"),"dark");
                    el.setAttribute('paction','dark');
                    localStorage["ADT_dark"] = "false";
                    tips("开灯");
                    //TODO: set storage
                },
                dark: function(el){
                    t.addClass(d.querySelector(".cover"),"dark");
                    el.setAttribute('paction','light');
                    localStorage["ADT_dark"] = "true";
                    tips("关灯")
                },
                max: function(el){
                    t.addClass(d.querySelector(".wrap"),"max");
                    el.setAttribute('paction','norm');
                    tips("最大化")
                },
                norm: function(el){
                    t.removeClass(d.querySelector(".wrap"),"max");
                    el.setAttribute('paction','max');
                },
                close: function(el){
                    iframe.parentNode.removeChild(iframe);
                    document.body.removeAttribute("style");
                },
                shortcuts: function(el){
                    var s = d.querySelector(".shortcuts").style;
                    if(s.display == "block"){
                        s.display = "none";
                    }else{
                        s.display = "block";
                    }
                },
                full: function() {
                    if (d.webkitIsFullScreen || d.mozFullScreen) {
                        d.webkitCancelFullScreen && d.webkitCancelFullScreen();
                        d.mozCancelFullScreen && d.mozCancelFullScreen()
                        var ei = d.querySelector(".full-control");
                        t.addClass(ei,"icon-expand");
                        t.removeClass(ei,"icon-contract");
                        tips("退出全屏")
                    } else {
                        player.webkitRequestFullScreen && player.webkitRequestFullScreen();
                        player.mozRequestFullScreen && player.mozRequestFullScreen()
                        var ei = d.querySelector(".full-control");
                        t.removeClass(ei,"icon-expand");
                        t.addClass(ei,"icon-contract");
                        tips("全屏")
                    }
                },
                showPane: function(evt) {
                    t.removeClass(d.querySelector(".ctrl"),"hide");
                    d.querySelector(".sidebar").style.display = "block";
                    t.removeClass(player,"nocursor");
                    //if((evt.pageY - d.querySelector(".ctrl").offsetTop - player.offsetTop + 5 > 0) ||
                    //    (evt.pageX - d.querySelector(".sidebar").offsetLeft - player.offsetLeft +5> 0)){
                    //    inzoom = true;
                    //}else{
                    //    inzoom = false;
                    //}
                    clearTimeout(showTimer)
                    showTimer = setTimeout(function(){
                        t.addClass(d.querySelector(".ctrl"),"hide");
                        d.querySelector(".sidebar").style.display = "none";
                        t.addClass(player,"nocursor");
                    },5000)
                }
            }
            var keyEvent = {
                32: function (evt) {
                    playerEvent.pstate(evt);
                },
                39: function () {
                    var time = video.currentTime + 20;
                    video.currentTime = time < video.duration ? time : video.duration;
                    videoEvent.timeupdate();
                    tips("移至 " + t.fTime(video.currentTime))
                },
                37: function () {
                    var time = video.currentTime - 30;
                    video.currentTime = time > 0 ? time : 0;
                    videoEvent.timeupdate();
                    tips("移至 " + t.fTime(video.currentTime))
                },
                38: function () {
                    var volume = video.volume + .05;
                    video.volume = volume < 1 ? volume : 1;
                    videoEvent.volumeupdate();
                    tips("音量 " + parseInt(video.volume * 100, 10) + "%");
                },
                40: function () {
                    var volume = video.volume - .05;
                    video.volume = volume > 0 ? volume : 0;
                    videoEvent.volumeupdate();
                    tips("音量 " + parseInt(video.volume * 100, 10) + "%");
                },
                77:function () {
                    pnorm = t.findPa(d, "max");
                    if (pnorm != null) {
                        playerEvent.max(pnorm);
                    }else{
                        playerEvent.norm(t.findPa(d, "norm"));
                    }
                },
                70: function () {
                    playerEvent.full();
                },
                76: function () {
                    documentClick.light();
                },
            };

            var loadingEvent = {
                show:function(){
                    d.querySelector(".loading").style.display = "block";
                    d.querySelector(".toolbar-left .icon-spinner").style.display = "block";
                    d.querySelector(".toolbar-left .play-control").style.display = "none";
                },
                hide:function(){
                    d.querySelector(".loading").style.display = "none";
                    d.querySelector(".toolbar-left .icon-spinner").style.display = "none";
                    d.querySelector(".toolbar-left .play-control").style.display = "block";
                }
            }
            var lastCurrentTime = 0;
            var videoEvent = {
                timeupdate: function () {
                    loadingEvent[video.readyState >= 3 ? "hide" : "show"]();
                    if ((Math.abs(video.currentTime - lastCurrentTime) < 1 && video.currentTime - video.duration > 1)|| videobarDraging) {
                        return
                    }
                    var pst = video.currentTime/video.duration;
                    d.querySelector(".progress-timeline").style.width = pst * 100 + "%";
                    //t.findPa(d, "video-timeline").setAttribute("pst", pst)
                    t.findPa(d,"ctime").innerHTML = t.fTime(video.currentTime);
                    t.findPa(d,"stime").innerHTML = '/'+t.fTime(video.duration);
                    //getNd("msg").innerHTML = formatTime(video.currentTime) + ' <span class="disable">/ ' + formatTime(video.duration) + "</span>";
                    lastCurrentTime = video.currentTime
                },
                volumeupdate: function() {
                    d.querySelector(".volume-timeline").style.width = video.volume * 100 + "%";
                    localStorage["ADT_volume"] = video.volume;
                },
                play: function() {
                    var i = d.querySelector(".play-control");
                    t.removeClass(i, "icon-play");
                    t.addClass(i, "icon-pause");
                    tips("播放");
                },
                pause: function() {
                    var i = d.querySelector(".play-control");
                    t.removeClass(i, "icon-pause");
                    t.addClass(i, "icon-play");
                    tips("暂停");
                }
            }
            var videobarDraging = false;
            var volumebarDraging = false;
            var videobarEvent = {
                mouseDown: function(evt){
                    var paction = findPaction(evt.target).getAttribute("paction");
                    if(paction == "video-progress"){
                        videobarDraging = true;
                    }else if(paction == "volume-progress"){
                        volumebarDraging = true;
                    }
                },
                mouseMove: function(evt){
                    if(videobarDraging){
                        var l = evt.pageX - player.offsetLeft+5;
                        var sum = player.offsetWidth;
                        if (l > sum) { 
                            return;
                        }else if(l<0){
                            l = 0;
                        }
                        d.querySelector(".progress-timeline").style.width = l/sum * 100 + "%";
                        tips("移至 " + t.fTime(video.duration * l/sum))
                    }else if(volumebarDraging){
                        var volumeBar = d.querySelector(".progress-volume");
                        var l = evt.pageX - volumeBar.offsetLeft -player.offsetLeft + 3;
                        var sum = volumeBar.offsetWidth;
                        if(l > sum) {
                            return;
                        }else if(l<0){
                            l = 0;
                        }
                        d.querySelector(".volume-timeline").style.width = l/sum * 100 + "%";
                        tips("音量 " + Math.floor(l/sum * 100) + "%");
                    }
                },
                mouseUp: function(evt){
                    if(videobarDraging){
                        var l = evt.pageX - player.offsetLeft + 5;
                        var sum = player.offsetWidth;
                        if(l > sum) { 
                            l = sum;
                        }
                        video.currentTime = video.duration * l / sum;
                        tips("移至 " + t.fTime(video.currentTime))
                        videoEvent.timeupdate();
                        videobarDraging = false;
                    }else if(volumebarDraging){
                        var volumeBar = d.querySelector(".progress-volume");
                        var l = evt.pageX - volumeBar.offsetLeft -player.offsetLeft + 3;
                        var sum = volumeBar.offsetWidth;
                        if(l > sum) {
                            l = sum;
                        }else if(l<0){
                            l = 0;
                        }
                        video.volume = l/sum;
                        tips("音量 " + parseInt(video.volume * 100, 10) + "%");
                        videoEvent.volumeupdate();
                        volumebarDraging = false;
                    }
                }
            }
            //找到paction所在的DOM
            function findPaction(el) {
                return el.getAttribute("paction") || el == document.body ? el : findPaction(el.parentNode);
            }

            var tipsTimer;
            function tips(content){
                var msg = d.querySelector(".msg");
                t.addClass(msg,"show");
                msg.innerHTML = '<span class="content">'+content+'</span>'
                clearTimeout(tipsTimer);
                tipsTimer = setTimeout(function(){
                    t.removeClass(msg,"show");
                },2500);
            }

            function clickEvent(e){

                var paction = findPaction(e.target);
                var pactionType = paction.getAttribute("paction");
                if (pactionType in playerEvent) {
                    playerEvent[pactionType](paction);
                };
            }
            function keyDown(e) {
                var key = e.keyCode.toString();
                if (key in keyEvent) keyEvent[key](e);
            }
            
            d.body.addEventListener("click", clickEvent);
            //self != parent && parent.document.body.addEventListener("keydown", keyDown);
            d.body.addEventListener("keydown", keyDown);
            
            d.body.addEventListener("mousedown", videobarEvent.mouseDown);
            d.body.addEventListener("mousemove", videobarEvent.mouseMove);
            d.body.addEventListener("mouseup", videobarEvent.mouseUp);

            player.addEventListener("mousemove",playerEvent.showPane);
            video.addEventListener("timeupdate", videoEvent.timeupdate);

            video.addEventListener("play", videoEvent.play);
            video.addEventListener("pause", videoEvent.pause);

            //init player
            var volumeValue = parseFloat(localStorage["ADT_volume"]);
            video.volume = isNaN(volumeValue) ? 1 : volumeValue;
            videoEvent.volumeupdate();

            if(localStorage["ADT_dark"] === "true"){
                playerEvent.dark();
            }
        },
        init:function(){
            var l = document.URL;
            for (var i = this.sites.length - 1; i >= 0; i--) {
                if(this.sites[i].reg.test(l)){
                    //调整页面
                    //this.hideFlash(this.sites[i].getFlashPlayer());
                    var divv = document.createElement('span')
                    divv.innerHTML = '<i title="HTML5播放" style="display:inline-block;float:left;margin-top:20px;padding: .2em .6em .3em;font-size: 20px;font-weight: 700;line-height: 1;color: #fff;text-align: center;vertical-align: baseline;border-radius: .25em;background-color: #428bca;margin-left: 10px;cursor: pointer;font-style: normal;" id="ADT-PlayHTML5-btn">HTML5播放</i>'
                    console.log('hi');
                    divv.style.cssText = "float:right;margin-top:-50px;width:300px;height:50px;";
                    document.querySelector("#vpvideotitlev5>div.base").appendChild(divv);
                    //获取回调函数并绑事件
                    var t = this;
                    var element = document.getElementById("ADT-PlayHTML5-btn");
                    var getFn = this.sites[i].getFn();
                    var getFlashPlayer = this.sites[i].getFlashPlayer();
                    var hideFlash = this.hideFlash;
                    element.addEventListener("click", function(){
                        hideFlash.call(t,getFlashPlayer);
                        getFn.call(t,function(urls){
                            t.initPlayer(urls);
                        });
                    }, false);
                    break;
                }
            };
        }
    };
    new html5Video().init();
})();